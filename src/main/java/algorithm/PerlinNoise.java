package algorithm;

import java.math.BigDecimal;
import java.text.DecimalFormat;

public class PerlinNoise {

    //permutation table:排列表，理论上转置数组可以任意指定，但是后续的实现都使用Perlin最初提出的数组：
    static int perm[] = {
            151, 160, 137, 91, 90, 15,
            131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
            190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
            88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
            77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
            102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
            135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
            5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
            223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
            129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
            251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
            49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
            138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,
            151
    };

    static int gradient[] = {
            151, 160, 137, 91, 90, 15,
            131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
            190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
            88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
            77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
            102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
            135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
            5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
            223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
            129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
            251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
            49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
            138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,
            151
    };

    public static void main(String[] args) {

        for (int i = 0; i < 100; i++) {
            System.out.print(onePerlinNoise(Math.random()) + ",");
        }
    }

    /**
     * 1. 根据传入的值找到对应的随机值和梯度
     * 2. 计算出目标点到两边点的向量
     * 3. 根据随机值 梯度 向量计算出两点的影响值
     * 5. 计算出平滑参数
     * 5. 根据影响值 平滑参数 计算出噪音值
     */
    static double onePerlinNoise(double x) {
        // 计算出整数部分 小数部分
        int valueInt = (int) Math.floor(x);
        double valueDec = x - valueInt;

        // 随机梯度
        // 随机值简单化，直接作为梯度计算
        double leftGradient = perm[valueInt & 255];
        double rightGradient = perm[(valueInt + 1) & 255];

        // 方向向量
        double leftVec = x - valueInt;
        double rightVec = x - valueInt - 1;

        // 影响值
        double leftEffect = leftGradient * leftVec;
        double rightEffect = rightGradient * rightVec;

        // 计算平滑参数
        double lerp = interpolate(valueDec);

        BigDecimal bd = new BigDecimal(leftEffect * (1 - lerp) + rightEffect * (lerp));
        return bd.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
    }

    private static double oneGradient(int value) {
        value = (value << 13) ^ value;
        return (1.0 - ((value * (value * value * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);
    }

    // 计算平滑参数 {6t^{5}-15t^{4}+10t^{3}}
    private static double interpolate(double value) {
        return value * value * value * (value * (value * 6 - 15) + 10);
    }


}
